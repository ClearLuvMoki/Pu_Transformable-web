*{
    padding: 0;
    margin: 0;
     /*
    box-sizing：自动调整窗口大小的关键
    CSS3:
    box-sizing: 
    content-box|border-box|inherit;
    */
    box-sizing: border-box;
}
body{
    font-family: 'Roboto', sans-serif;
}
/* 背景图片 */
.wave{
    position: fixed;
    height: 100%;
    left: 0;
    bottom: 0;
    z-index: -1;  
}
/* 整体的container */
.container{
    width: 100vw;
    height: 100vh;
    /* 
    display:gird
    网格布局
    grid-template-columns: repeat(2,1fr); 
    两列，1fx宽
    */
    display: grid;
    grid-template-columns: repeat(2,1fr);
    /* 
     * 设置了网格之间的间隙宽度
     */
    grid-gap: 18rem;
    padding: 0 2rem;
}
.img{
    /* 
     * display:flex 是一种布局方式。
     * Flex是Flexible Box的缩写，意为"弹性布局"
        flex的六个属性
        flex-direction:  row/column 容器内元素的排列方向(默认横向排列， 从左到右/从上到下)
        flex-direction:  row-reverse;沿水平主轴让元素从右向左排列；
        1.flex-wrap 容器内元素的换行(默认不换行)
        flex-wrap: nowrap; (默认)元素不换行,
        比如：一个div宽度100%，设置此属性，2个div宽度就自动变成各50%；
        flex-wrap: wrap; 元素换行,
        比如：一个div宽度100%，设置此属性，第二个div就在第二行了；
        2.justify-content 元素在主轴（页面）上的排列
        justify-content : center;元素在主轴（页面）上居中排列
        justify-content : flex-start;元素在主轴（页面）上由左或者上开始排列
        justify-content : flex-end;元素在主轴（页面）上由右或者下开始排列
        justify-content : space-between;元素在主轴（页面）上左右两端或者上下两端开始排列
        justify-content : space-around;每个元素两侧的间隔相等。所以，元素之间的间隔比元素与边框的间隔大一倍
        3.align-items 元素在主轴（页面）当前行的侧轴（纵轴）方向上的对齐方式
        align-items : flex-start; 弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界（靠上对齐）。
        align-items : flex-end; 弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。（靠下对齐）
        align-items : center; 弹性盒子元素在该行的侧轴（纵轴）上居中放置。（居中对齐）
        align-items : baseline; 如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。（靠上对齐）
        4.align-content 在弹性容器内的元素没有占用交叉轴上所有可用的空间时对齐容器内的各项（垂直）
        align-content 在弹性容器内的元素没有占用交叉轴上所有可用的空间时对齐容器内的各项（垂直）
        align-content: flex-start; 元素位于容器的开头。各行向弹性盒容器的起始位置堆叠。
        :align-content: flex-end; 元素位于容器的结尾。各行向弹性盒容器的结尾位置堆叠。
        align-content: stretch; 元素位于容器的中心。各行向弹性盒容器的中间位置堆叠。
        :align-content: center; 默认值。元素被拉伸以适应容器。各行将会伸展以占用剩余的空间。如果剩余的空间是负数，该值等效于'flex-start'。
        align-content: space-between;元素位于各行之间留有空白的容器内。各行在弹性盒容器中平均分布。
        align-content: space-around;元素位于各行之前、之间、之后都留有空白的容器内。各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。如果剩余的空间是负数或弹性盒容器中只有一行，该值等效于'center'。

      */
    display: flex;
    justify-content: flex-end;
    align-items: center;
}
.img img{
    width: 500px;
}

.login-box{
    display: flex;
    align-items: center;
    text-align: center;
}
form{
    width: 360px;
}
.avatar{
    /* 表单头像 */
    width: 100px;
}
form h2{
    /* 表单title的style */
    font-size: 2.9rem;
    text-transform: uppercase;
    margin: 15px 0;
    color: #999;
}

.input-group{
    /* 输入框 */
    /* 父元素设置realtive相对定位 */
    position: relative;
    display: grid;
    grid-template-columns: 7% 93%;
    margin: 25px 0;
    padding: 5px 0;
    border-bottom: 2px solid #d9d9d9;
}

.input-group:nth-child(1){
    /* 规定属于其父元素的第一个子元素margin-bottom：
    nth-child(odd)/nth-child(even)
    odd 和 even 是可用于匹配下标是奇数或偶数的子元素的关键词（第一个子元素的下标是 1）。
    nth-child(an+b)
    使用公式 (an + b)。描述：表示周期的长度，n 是计数器（从 0 开始），b 是偏移值。 */
    margin-bottom: 4px;
}
.input-group:before,.input-group:after{
    /* 子元素设置绝对定位，才可以使用top，bottom等 */
    content: '';
    position: absolute;
    bottom: -2px;
    width: 0;
    height: 2px;
    background-color: #38d39f;
    /* 
    过渡动画：transition 
    1.transition-property: 指定应用过渡属性的名称
        transition-property:none / all / width&&height
    2.transition-duration 属性以秒或毫秒为单位指定过渡动画所需的时间。默认值为 0s ，表示不出现过渡动画。
        transition-duration: 1s, 10s, 10ms; 可以应用多个值，对应于transition-property的多个属性，表示每个属性对应的延时时间
    3.transition-timing-function 表示过渡动画的运动曲线。
        首先说一下贝塞尔曲线函数：cubic-bezier(x1,y1,x2,y2)： 一共四个点p0，p1，p2，p3
        p0(0,0),p1(x1,y1),p2(x2,y2),p3(1,1) -- x和y的取值范围是0-1
        transition-timing-function: ease 默认值 /linear 匀速运动 / ease-in 慢速开始 / ease-out 慢速结束 / ease-in-out 慢速开始慢速结束
    4.transition-delay 表示过渡效果的延迟时间
        transition-delay: 3s;
    5.简写这个属性
        transition: all 5s linear .2s;  以空格隔开属性 --- .2s = 0.2s
        transition: all 5s linear .2s, height 3s ease-in-out;  可以以逗号隔开多个过渡。
    */
    transition: .5s;
}
.input-group:after{
    right: 50%;
}
.input-group:before{
    left: 50%;
}
.icon{
    display: flex;
    justify-content: center;
    align-items: center;
}
.icon i{
    color: #d9d9d9;
    transition: .5s;
}

.input-group > div{
    position: relative;
    height: 45px;
}

.input-group >div > h5{
    position: absolute;
    left: 10px;
    top: 50%;
    /* css3--trasnform:
        单位deg（degree）： 旋转角度数
        变换 transform :旋转--rotate（deg） 缩放--scale（number，number） 扭曲--skew（deg） 位移--translate（px，px）
        过渡 transition
        动画 animation
    */
    transform: translateY(-50%);
    color: #d9d9d9;
    font-size: 18px;
    transition: .3s;
}
.input-group.focus .icon i{
    color: #38d39f;
}
.input-group.focus div h5{
    top: -5px;
    font-size: 15px;
}
.input-group.focus:after,.input-group.focus:before{
    width: 50%;
}
.input{
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    border: none;
    outline: none;
    background: none;
    padding: 0.5rem 0.7rem;
    font-size: 1.2rem;
    color: #555;
    font-family: 'Roboto', sans-serif;
}
a{
    display: block;
    text-align: right;
    text-decoration: none;
    color: #999;
    font-size: 0.9rem;
    transition: .3s;
}
a:hover{
    color: #38d39f;
}
.btn{
    display: block;
    width: 100%;
    height: 50px;
    border-radius: 25px;
    margin: 1rem 0;
    font-size: 1.2rem;
    outline: none;
    border: none;
    background-image: linear-gradient(to right,#32be8f,#38d39f,#32be8f);
    /* 光标的样式： pointer-手（具体样式请查手册） */
    cursor: pointer;
    color: #fff;
    text-transform: uppercase;
    font-family: 'Roboto', sans-serif;
    background-size: 200%;
    transition: .5s;
}
.btn:hover{
    background-position: right;
}
.ClearLuvMoki{
    position: absolute;
    width: 100%;
    height: 50px;
    bottom: 2px;
    color: #38d39f;
    text-align: center;
    font-size: 18px;
    font-family: 'Roboto', sans-serif;
}

/*媒体查询*/
/* 媒体查询
    语法： @media all and (min-width:xxxpx)
    all: 所有设备；
    print: 打印预览图;
    screen: 显示器，笔记本，移动端的；
    tv： 电视;
    handled: 便携设备以及平板笔记本等；
*/
@media screen and (max-width: 1080px) {
    .container{
        grid-gap: 9rem;
    }
}
@media screen and (max-width: 1024px) {
    form{
        width: 290px;
    }
    form h2{
        font-size: 2.4rem;
        margin: 8px 0;
    }
    .img img{
        width: 360px;
    }
}
@media screen and (max-width: 768px) {
    .wave{
        display: none;
    }
    .img{
        display: none;
    }
    .container{
        grid-template-columns: 1fr;
    }
    .login-box{
        justify-content: center;
    }
}